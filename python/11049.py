# 11049
'''
잘 이해가 안가니 다시 꼭 보기를 권장!!
'''
import sys
input = sys.stdin.readline

N = int(input()) # 행렬의 개수 N

'''행렬의 크기 r 과 c 가 주어짐'''
arr = [list(map(int, input().split())) for _ in range(N)] 

dp = [[0]*N for _ in range(N)]

'''
예시에서 5 3, 3 2, 2 6 요렇게 3가지 행렬으로 보았을 때,
5로 시작해서 2로 끝나는 행렬의 연산횟수를 저장하는 방법을 생각해보자.
5로 시작해서 2로 끝나는 행렬을 만들 수 있는 모든 방법을 비교하여 최솟값을 찾아야하며, 
다음과 같은 경우는 행렬을 만들 수 있는 방법은 5*3*2 한 가지이다.

5*3 연산 횟수 + 3*2 연산 횟수 + 5*3*2

그 다음에는 5로 시작해서 6으로 끝나는 행렬의 연산 횟수를 구할 차례이고,
5*3 보다 3*2와 2*6을 먼저 구하는 방법, 5*3과 3*2를 먼저 구하고 2*6을 하는 방법 2가지이다.
그러기에 값을 비교하여 작은 값을 저장한다.

min(5*3 연산횟수 + 3*6 연산횟수 + 5*3*6 == 126, 
    5*2 연산횟수 + 2*6 연산횟수 +_ 5*2*6 == 90)
    
이렇게 최솟 연산 횟수는 90이 된다. 
'''


'''

간격이 작은 범위부터 계산한다.
위에서 연산 경우의 수를 확인하면서 살펴봤듯이
행렬 4개를 곱한 연산 횟수를 알기 위해서는 👉 3개를 곱한 연산 횟수를 알아야 하고,
3개를 곱한 연산 횟수를 구하기 위해서는 👉 2개를 곱한 연산 횟수를 알고 있어야 한다.


따라서, 간격이 작은 범위부터 연산 횟수를 계산해 나갈 것이다. (간격이 작은 것부터 계산한다.)

# 1. 간격이 1인 범위 먼저 전부 계산
행렬 1 ~ 2, 행렬 2 ~ 3, 행렬 3 ~ 4

# 2. 다음으로 간격이 2인 범위 전부 계산
행렬 1 ~ 3, 행렬 2 ~ 4

# 3. 마지막으로 간격이 3인 범위 계산
행렬 1 ~ 4

행렬1 x 행렬2 x 행렬3있을 때, term 2이면 행렬 3개의 곱을 계산을 해야하는데,
행렬1(행렬2 x 행렬3)
(행렬1 x 행렬2)행렬3 

이렇게 있을 것(많으면 더 많아지고)

이렇게 괄호 안 행렬이 1개부터 최대 N-1까지(term개) 구성이 된다.
이 모든 경우를 계산 하기 위해서 start 부터 start + term 직전까지 증가하는 t 변수를 활용한다.
이 변수를 이용해서 괄호로 묶이는 묶음 기준으로 왼쪽과 오른쪽으로 나누고
dp[start][t] -> 시작 행렬 start, 끝 행렬 t 로 설정
오른쪽 묶음의 연산 횟수는 dp[t+1][start+term] 
'왼쪽 묶음의 결과 행렬 X 오른쪽 묶음의 결과 행렬'의 연산 횟수는 
arr[start][0] * arr[t][1] * arr[start+term][1]
'''
for term in range(1, N):
    for start in range(N):  # 첫행렬 : i, 끝행렬: i+term
        if start + term == N:  # 범위를 벗어나면 무시
            break
        
        dp[start][start+term] = int(2**31)  # 지금 계산할 첫행렬과 끝행렬 -> 최대 저 수를 넘지 않는다고 문제에서 정의 했으므로 최소를 찾기위해 설정
        
        for t in range(start, start+term):
            dp[start][start+term] = min(dp[start][start+term],
                                        # 👇 1 + 2 + 3
                                        dp[start][t]+dp[t+1][start+term] + arr[start][0] * arr[t][1] * arr[start+term][1])

print(dp[0][N-1])